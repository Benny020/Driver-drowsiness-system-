import cv2
import dlib
import pygame
face_detector = dlib.get_frontal_face_detector()
landmark_predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
cap = cv2.VideoCapture(0)
pygame.mixer.init()
alarm = pygame.mixer.Sound('alarm.wav')
def distance(point1, point2):
    return ((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5
def eye_aspect_ratio(eye):
    A = distance((eye[1].x, eye[1].y), (eye[5].x, eye[5].y))
    B = distance((eye[2].x, eye[2].y), (eye[4].x, eye[4].y))
    C = distance((eye[0].x, eye[0].y), (eye[3].x, eye[3].y))
    ear = (A + B) / (2.0 * C)
    return ear
alarm_active = False
closed_eyes_frames = 0
EYES_CLOSED_THRESHOLD = 1


while True:
    ret, frame = cap.read()

    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_detector(gray)

    for face in faces:
        landmarks = landmark_predictor(gray, face)

        left_eye = [landmarks.part(36), landmarks.part(37), landmarks.part(38), landmarks.part(39), landmarks.part(40), landmarks.part(41)]
        right_eye = [landmarks.part(42), landmarks.part(43), landmarks.part(44), landmarks.part(45), landmarks.part(46), landmarks.part(47)]

        left_ear = eye_aspect_ratio(left_eye)
        right_ear = eye_aspect_ratio(right_eye)

        cv2.rectangle(frame, (face.left(), face.top()), (face.right(), face.bottom()), (0, 255, 0), 2)
        cv2.putText(frame, f"Left EAR: {left_ear:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.putText(frame, f"Right EAR: {right_ear:.2f}", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        avg_ear = (left_ear + right_ear) / 2.0

        if avg_ear < 0.2:
            closed_eyes_frames += 1
            if closed_eyes_frames >= EYES_CLOSED_THRESHOLD * 10:
                cv2.putText(frame, "       Drowsiness Detected", (200, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                if not alarm_active:
                    alarm.play() 
                    alarm_active = True
        else:
            closed_eyes_frames = 0
            alarm.stop()
            alarm_active = False

    cv2.imshow("Driver Drowsiness Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

